from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
from datetime import datetime
import os
import logging

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞
load_dotenv()
api_key = os.getenv("TELEGRAM_API_KEY")

# üìù –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
tasks = []

# üìã –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard_start = ReplyKeyboardMarkup(
    [["–°—Ç–∞—Ä—Ç", "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"], ["üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á", "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"], ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"]],
    resize_keyboard=True
)

keyboard_create_task = ReplyKeyboardMarkup(
    [["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"]],
    resize_keyboard=True
)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:", reply_markup=keyboard_start)

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–°—Ç–∞—Ä—Ç":
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Smart_P1anner_bot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.", reply_markup=keyboard_start)

    elif text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data.clear()
        context.user_data["creating_task"] = True
        context.user_data["step"] = "name"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard_create_task)

    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data.clear()
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard_start)

    elif text == "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á":
        if tasks:
            task_list = "\n".join(
                f"{i+1}. {'‚úÖ' if task['done'] else 'üî≤'} {task['name']} ‚Äî {task['description']} (–î–µ–¥–ª–∞–π–Ω: {task['deadline']})"
                for i, task in enumerate(tasks)
            )
            await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{task_list}")
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")

    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É":
        if tasks:
            context.user_data.clear()
            context.user_data["marking_done"] = True
            task_list = "\n".join(
                f"{i+1}. {'‚úÖ' if task['done'] else 'üî≤'} {task['name']}"
                for i, task in enumerate(tasks)
            )
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:\n{task_list}", reply_markup=keyboard_create_task)
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")

    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        if tasks:
            context.user_data.clear()
            context.user_data["deleting_task"] = True
            task_list = "\n".join(
                f"{i+1}. {'‚úÖ' if task['done'] else 'üî≤'} {task['name']}"
                for i, task in enumerate(tasks)
            )
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{task_list}", reply_markup=keyboard_create_task)
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")

    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É":
        if tasks:
            context.user_data.clear()
            context.user_data["editing_task"] = True
            task_list = "\n".join(
                f"{i+1}. {'‚úÖ' if task['done'] else 'üî≤'} {task['name']} ‚Äî {task['description']} (–î–µ–¥–ª–∞–π–Ω: {task['deadline']})"
                for i, task in enumerate(tasks)
            )
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{task_list}", reply_markup=keyboard_create_task)
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")

    elif context.user_data.get("creating_task"):
        step = context.user_data.get("step")

        if step == "name":
            context.user_data["task_name"] = text
            context.user_data["step"] = "description"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

        elif step == "description":
            context.user_data["task_description"] = text
            context.user_data["step"] = "deadline"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025):")

        elif step == "deadline":
            task = {
                "name": context.user_data["task_name"],
                "description": context.user_data["task_description"],
                "deadline": text,
                "done": False,
                "chat_id": update.effective_chat.id
            }
            tasks.append(task)
            context.user_data.clear()
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n*{task['name']}* ‚Äî {task['description']} (–î–µ–¥–ª–∞–π–Ω: {task['deadline']})",
                reply_markup=keyboard_start,
                parse_mode="Markdown"
            )

    elif context.user_data.get("marking_done"):
        try:
            index = int(text) - 1
            if 0 <= index < len(tasks):
                tasks[index]["done"] = True
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{tasks[index]['name']}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ", reply_markup=keyboard_start)
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=keyboard_start)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=keyboard_start)
        context.user_data.clear()

    elif context.user_data.get("deleting_task"):
        try:
            index = int(text) - 1
            if 0 <= index < len(tasks):
                removed = tasks.pop(index)
                await update.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ '{removed['name']}' —É–¥–∞–ª–µ–Ω–∞.", reply_markup=keyboard_start)
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=keyboard_start)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=keyboard_start)
        context.user_data.clear()

    elif context.user_data.get("editing_task"):
        try:
            index = int(text) - 1
            if 0 <= index < len(tasks):
                context.user_data["edit_index"] = index
                context.user_data["step"] = "new_name"
                context.user_data["editing_task"] = False
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=keyboard_start)
                context.user_data.clear()
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=keyboard_start)
            context.user_data.clear()

    elif context.user_data.get("step") == "new_name":
        context.user_data["new_name"] = text
        context.user_data["step"] = "new_description"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

    elif context.user_data.get("step") == "new_description":
        context.user_data["new_description"] = text
        context.user_data["step"] = "new_deadline"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:")

    elif context.user_data.get("step") == "new_deadline":
        index = context.user_data["edit_index"]
        tasks[index]["name"] = context.user_data["new_name"]
        tasks[index]["description"] = context.user_data["new_description"]
        tasks[index]["deadline"] = text
        await update.message.reply_text(
            f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n*{tasks[index]['name']}* ‚Äî {tasks[index]['description']} (–î–µ–¥–ª–∞–π–Ω: {tasks[index]['deadline']})",
            reply_markup=keyboard_start,
            parse_mode="Markdown"
        )
        context.user_data.clear()

    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# ‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
async def check_deadlines(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    for task in tasks:
        if not task["done"]:
            try:
                deadline = datetime.strptime(task["deadline"], "%d.%m.%Y")
                if (deadline.date() - now.date()).days == 0:
                    await context.bot.send_message(
                        chat_id=task["chat_id"],
                        text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∞ '{task['name']}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è! (–î–µ–¥–ª–∞–π–Ω: {task['deadline']})"
                    )
            except ValueError:
                continue

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(api_key).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    app.job_queue.run_repeating(check_deadlines, interval=30, first=0)

    app.run_polling()
