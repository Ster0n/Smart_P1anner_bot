from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
api_key = os.getenv("TELEGRAM_API_KEY")

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–≤ –ø–∞–º—è—Ç–∏)
tasks = []

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard_start = ReplyKeyboardMarkup(
    [["–°—Ç–∞—Ä—Ç", "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"], ["üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á"]],
    resize_keyboard=True
)

keyboard_create_task = ReplyKeyboardMarkup(
    [["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"]],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:",
        reply_markup=keyboard_start
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if text == "–°—Ç–∞—Ä—Ç":
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø Smart_P1anner_bot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.",
            reply_markup=keyboard_start
        )

    # –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    elif text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data.clear()
        context.user_data["creating_task"] = True
        context.user_data["step"] = "name"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard_create_task)

    # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data.clear()
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard_start)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    elif text == "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á":
        if tasks:
            task_list = "\n".join(
                f"{i + 1}. {task['name']} ‚Äî {task['description']}" for i, task in enumerate(tasks)
            )
            await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{task_list}")
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")

    # –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    elif context.user_data.get("creating_task"):
        step = context.user_data.get("step")

        if step == "name":
            context.user_data["task_name"] = text
            context.user_data["step"] = "description"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

        elif step == "description":
            task_name = context.user_data.get("task_name")
            task_description = text
            tasks.append({
                "name": task_name,
                "description": task_description,
                "done": False
            })
            context.user_data.clear()
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n*{task_name}* ‚Äî {task_description}",
                reply_markup=keyboard_start
            )

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(api_key).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
app.run_polling(timeout=30)