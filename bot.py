from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
api_key = os.getenv("TELEGRAM_API_KEY")

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏)
tasks = []

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard_start = ReplyKeyboardMarkup(
    [["–°—Ç–∞—Ä—Ç", "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"]],
    resize_keyboard=True
)

keyboard_create_task = ReplyKeyboardMarkup(
    [["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"]],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:",
        reply_markup=keyboard_start
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–°—Ç–∞—Ä—Ç":
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø Smart_P1anner_bot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.",
            reply_markup=keyboard_create_task  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        )

    elif text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—Éüìã":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        context.user_data["creating_task"] = True  # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥—ë–º –≤–≤–æ–¥ –∑–∞–¥–∞—á–∏
        await update.message.reply_text("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É'", reply_markup=keyboard_create_task)

    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data["creating_task"] = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard_start)

    elif context.user_data.get("creating_task"):
        tasks.append(text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}", reply_markup=keyboard_start)
        context.user_data["creating_task"] = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(api_key).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
app.run_polling(timeout=30)
